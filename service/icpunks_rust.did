//Token related types
type TokenDesc = 
 record {
   desc: text;
   id: nat;
   name: text;
   owner: principal;
   properties: vec Property;
   url: text;
 };
type Time = int;
type StorageActor = 
 service {
   addRecord: (principal, Operation, opt principal, opt principal, nat,
    Time) -> (nat);
 };
 type Property = 
 record {
   name: text;
   value: text;
 };

type Operation = 
 variant {
   approve;
   claim;
   init;
   transfer;
 };


//Tx related types
type ICPTs = record { e8s : nat64 };
type TransactionNotification = record {
  to : principal;
  to_subaccount : opt vec nat8;
  from : principal;
  memo : nat64;
  from_subaccount : opt vec nat8;
  amount : ICPTs;
  block_height : nat64;
};
type Result = variant { Ok : text; Err : text };


//HttpRequest related types
type HeaderField = record { text; text; };

type HttpRequest = record {
  method: text;
  url: text;
  headers: vec HeaderField;
  body: blob;
};

type HttpResponse = record {
  status_code: nat16;
  headers: vec HeaderField;
  body: blob;
  streaming_strategy: opt StreamingStrategy;
};

type StreamingCallbackHttpResponse = record {
  body: blob;
  token: opt Token;
};

type Token = record {};

type StreamingStrategy = variant {
  Callback: record {
    callback: func (Token) -> (StreamingCallbackHttpResponse) query;
    token: Token;
  };
};

type ICPunk = 
 service {
   //container specific functions, used only by owner
   add_genesis_record: () -> (nat);
   get_cycles: () -> (nat) query;
   get_storage_canister: () -> (opt StorageActor) query;
   set_storage_canister_id: (opt principal) -> (bool);

  //ERC721 similar methods
   name: () -> (text) query;
   symbol: () -> (text) query;
   total_supply: () -> (nat) query;
   owner: () -> (principal) query;
   set_owner: (principal) -> (bool);

   //Returns owner of token with given ID
   owner_of: (nat) -> (opt principal) query;
   //Returns metadata of token with given ID
   data_of: (nat) -> (TokenDesc) query;
   //Return IDs of all tokens owner by given user
   user_tokens: (principal) -> (vec nat) query;
   //Sends token to given principal, can be invoked by current token owner only!
   transfer_to: (principal, nat) -> (bool);

   //Returns list of current tokens for sale, this method will change
   get_listed: (nat) -> (vec nat) query;
   //Lists token for sale for given price, can be invoked by current token owner!
   list: (nat, nat) -> (bool);
   //Delists token for sale for given price, can be invoked by current token owner!
   delist: (nat) -> (bool);
   //Receives notification from ledger, that payment has been made, memo signifies the token ID, sender will receive token if requirements are met
   transaction_notification : (TransactionNotification) -> (Result);

   //Used to get assets data of Tokens, use url from Token Metadata
   http_request: (request: HttpRequest) -> (HttpResponse) query;
 };
service : (text, text, nat, principal) -> ICPunk
